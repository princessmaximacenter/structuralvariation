## Structural variation pipeline
### Default config
### Last update: 2021-07-09

# Variables can be overwritten by cohort and environment config files
# filled into the templates in scripts themselves by replacing ${}

root_dir="/Users/ianthevanbelzen/PycharmProjects/structuralvariation/"
wdir=paste0(root_dir,"sv_functional_analysis/")
script_dir = wdir
script_dir_fusionsq = paste0(root_dir,"fusion_sq/R/")
resources_dir="/Users/ianthevanbelzen/Documents/resources/"
data_dir="/Users/ianthevanbelzen/data/"
utils_script_dir=paste0(root_dir,"utils/")
utils_output_dir=paste0(root_dir,"output/utils/")
metadata_dir="/Users/ianthevanbelzen/data/metadata/"

test_identifier=NULL
cohort_identifier=test_identifier

cohort_wdir=paste0(wdir,"unit_test/${cohort_identifier}/")
input_vcf_data_dir=paste0("/Users/ianthevanbelzen/data/unit_tests/input_data/${cohort_identifier}/")

output_dir = paste0("${cohort_wdir}output/")
merged_svs_dir =output_dir
annotated_vcf_dir = output_dir
recurrent_output_dir = output_dir
expression_data_dir=paste0("${data_dir}rna_expression/gencode31oct2019_multioverlap_largest_overlap/")

## TODO maybe include sv filtering settings here

## end of overwritable config


## Output filename constants
#patient as prefix
svs_ranges_outfile="svs_ranges.tsv"
svs_union_outfile = "svs_union.tsv"
svs_merged_outfile = "svs_merged.tsv"
svs_merged_anno_outfile = "svs_merged.anno.tsv"
cytoband_level_recurrence_outfile="cytoband_level_recurrence.tsv"
gene_level_recurrence_outfile="gene_level_recurrence.tsv"
count_pairwise_overlaps_outfile="pairwise_overlaps.counts.tsv"
pairwise_overlaps_outfile="pairwise_overlaps.tsv"

## Utils overlaps 
# summary of pairwise overlaps on certain genomic feature
## feature is first in file name because it is the summarizing one (CNAs of chr arms)
cna_data_dir = paste0(data_dir,"/cnv/modeled_seg/")
cna_seg_file_ext = ".modelFinal.seg"
expected_autosomal_length = 3088269832-156040895-57227415


## overlaps for CNAs
## see templates below, keep for backwards compatibility 
gene_cna_overlap_outfile = "overlaps.cna_gene."
chr_arm_cna_overlap_outfile="overlaps.cna_chr_arm." 
cytoband_cna_overlap_outfile="overlaps.cna_cytoband." 

#eg genes annotated with CN l2fc weighted average 
gene_cna_outfile="gene_cna."
chr_arm_cna_outfile = "chr_arm_cna."
cytoband_cna_outfile = "cytoband_cna."
fga_per_chrom_outfile="fga_per_chrom."

## overlaps for SVs
gene_sv_overlap_outfile="overlaps.sv_gene."
gene_sv_bp_overlap_outfile="overlaps.sv_bp_gene."
exon_sv_overlap_outfile="overlaps.sv_exon."
exon_sv_bp_overlap_outfile="overlaps.sv_bp_exon."
cytoband_sv_overlap_outfile="overlaps.sv_cytoband."
population_db_sv_overlap_outfile="overlaps.sv_population_db."
#database_overlap_outfile="overlaps.sv_population_db."
segmental_duplications_sv_bp_overlap_outfile="overlaps.sv_bp_segmental_duplications."
repeatmasker_sv_bp_overlap_outfile="overlaps.sv_bp_repeatmasker."

#cols to include in overlaps for interpretation
svs_df_overlap_cols = c("patient_sv_name","from_coordinate","svLen",
                  "sv_name","bp_names_origin","patient_id","partner","tool","tumor_af","normal_af")

#cols to include in anno 
#note need to subset if exists!
svs_df_anno_cols = c("variant_type","patient_sv_merged","sv_merged_coordinate","tool_cnt",
  "flag_sv_population","sv_db_nstd166_overlaps","sv_db_nstd186_overlaps","sv_db_dgv_overlaps")

  
#include in output from genes gtf
gene_properties_df_cols = c("gene_id","to_coordinate","gene_name","gene_type","gene_width")
exons_properties_df_cols = c("exon_id","to_coordinate","gene_id","gene_name","gene_type","exon_number","exon_row")

#overlaps for cna
modeled_seg_cols=c("cna_id","width","cr_l2fc_50","maf_50","cr_l2fc_10","maf_10","cr_l2fc_90","maf_90")  

seg_cols=c("patient_cna_id","patient_label","call","cancer_type")
peak_cols=c("peak_id","seqnames","start","end","peak_coordinate")

#sv_peak_cols= c("patient_sv_name","from_coordinate","svLen","patient_id","partner_sv_name","tool","tumor_af","normal_af","patient_sv_merged","svtype")
sv_peak_cols = c("patient_sv_merged","patient_label","cytoband","tumor_af_mean","svlen_mean","cancer_type")

#expression
expression_gene_file_ext= "_RNA-Seq.gene_id.exon.counts.txt"



#SNV
snv_vcf_file_ext="*WGS.vcf.gz"
snv_somatic_outfile = "snv.somatic."
snv_germline_outfile = "snv.germline."


# Template paths
## Find + replace variables after loading config for patient / cohort  / override by docker

## Cohort level
cohort_path_template=paste0("${cohort_wdir}cohort.${cohort_identifier}.tsv")
cohort_checkpoint_svs_path_template=paste0("${cohort_wdir}checkpoint_svs.${cohort_identifier}.tsv")

cytoband_level_recurrence_path_template = paste0("${recurrent_output_dir}${cohort_identifier}.",cytoband_level_recurrence_outfile)
gene_level_recurrence_path_template = paste0("${recurrent_output_dir}${cohort_identifier}.",gene_level_recurrence_outfile)
pairwise_overlaps_path_template = paste0("${recurrent_output_dir}${cohort_identifier}.",pairwise_overlaps_outfile)
count_pairwise_overlaps_path_template = paste0("${recurrent_output_dir}${cohort_identifier}.",count_pairwise_overlaps_outfile)

## Patient level
vcf_manta_somatic_path_template = paste0("${input_vcf_data_dir}${patient_basename}_WGS.somaticSV.manta.${cohort_identifier}.vcf.gz")
vcf_manta_germline_path_template = paste0("${input_vcf_data_dir}${patient_basename}_WGS.diploidSV.manta.${cohort_identifier}.vcf.gz")
vcf_delly_path_template = paste0("${input_vcf_data_dir}${patient_basename}_WGS.delly.${cohort_identifier}.vcf.gz")
vcf_delly_somatic_path_template = "${input_vcf_data_dir}${patient_basename}_WGS.somatic.vcf.gz"
vcf_gridss_path_template = paste0("${input_vcf_data_dir}${patient_basename}_WGS.gridss.${cohort_identifier}.vcf.gz")
vcf_gridss_somatic_path_template="${input_vcf_data_dir}variants_${patient_basename}_WGS.somatic.vcf.bgz"


svs_ranges_path_template = paste0("${merged_svs_dir}${patient_basename}.",svs_ranges_outfile)
svs_union_path_template = paste0("${merged_svs_dir}${patient_basename}.",svs_union_outfile)
svs_merged_path_template = paste0("${merged_svs_dir}${patient_basename}.",svs_merged_outfile)
svs_merged_anno_path_template = paste0("${merged_svs_dir}${patient_basename}.",svs_merged_anno_outfile)

svs_ranges_somatic_path_template="${merged_svs_dir}${patient_basename}.somatic.svs_ranges.tsv"
svs_union_somatic_path_template="${merged_svs_dir}${patient_basename}.somatic.svs_union.tsv"
svs_merged_somatic_path_template="${merged_svs_dir}${patient_basename}.somatic.svs_merged.tsv"

svs_union_anno_path_template = "${merged_svs_dir}${patient_basename}.svs_union.anno.tsv"
svs_union_anno_multitool_path_template = "${merged_svs_dir}${patient_basename}.svs_union.anno.multitool.tsv"

svs_union_anno_somatic_path_template = "${merged_svs_dir}${patient_basename}.somatic.svs_union.anno.tsv"
svs_union_anno_somatic_multitool_path_template = "${merged_svs_dir}${patient_basename}.somatic.svs_union.anno.multitool.tsv"

svs_union_gene_overlaps_anno_path_template = "${merged_svs_dir}${patient_basename}.svs_union.anno.gene_overlaps.tsv"
svs_union_gene_overlaps_anno_path_multitool_template = "${merged_svs_dir}${patient_basename}.svs_union.anno.gene_overlaps.multitool.tsv"

svs_union_gene_overlaps_anno_somatic_path_template = "${merged_svs_dir}${patient_basename}.somatic.svs_union.anno.gene_overlaps.tsv"
svs_union_gene_overlaps_anno_somatic_path_multitool_template = "${merged_svs_dir}${patient_basename}.somatic.svs_union.anno.gene_overlaps.multitool.tsv"


svs_filtering_log_path_template="${merged_svs_dir}log.${patient_basename}.svs_filtering.txt"
svs_filtering_log_somatic_path_template="${merged_svs_dir}log.${patient_basename}.somatic.svs_filtering.txt"


##overlaps svs
sv_bp_gene_overlaps_path_template = paste0("${utils_output_dir}",gene_sv_bp_overlap_outfile,"${patient_basename}.tsv")
sv_gene_overlaps_path_template = paste0("${utils_output_dir}",gene_sv_overlap_outfile,"${patient_basename}.tsv")
sv_bp_exon_overlaps_path_template = paste0("${utils_output_dir}",exon_sv_bp_overlap_outfile,"${patient_basename}.tsv")
sv_exon_overlaps_path_template = paste0("${utils_output_dir}",exon_sv_overlap_outfile,"${patient_basename}.tsv")
sv_population_db_overlaps_path_template = paste0("${utils_output_dir}",population_db_sv_overlap_outfile,"${sv_database_identifier}.${patient_basename}.tsv")
sv_bp_repeatmasker_overlaps_path_template = paste0("${utils_output_dir}",repeatmasker_sv_bp_overlap_outfile,"${patient_basename}.tsv")
sv_bp_segmental_duplications_overlaps_path_template = paste0("${utils_output_dir}",segmental_duplications_sv_bp_overlap_outfile,"${patient_basename}.tsv")

## overlaps cnas
chr_arm_cna_overlap_path_template = paste0("${utils_output_dir}",chr_arm_cna_overlap_outfile,"${biomaterial_id}.tsv")
cytoband_cna_overlap_path_template = paste0("${utils_output_dir}",cytoband_cna_overlap_outfile,"${biomaterial_id}.tsv")
chr_arm_cna_path_template = paste0("${utils_output_dir}",chr_arm_cna_outfile,"${biomaterial_id}.tsv")
cytoband_cna_path_template = paste0("${utils_output_dir}",cytoband_cna_outfile,"${biomaterial_id}.tsv")
fga_per_chrom_path_template = paste0("${utils_output_dir}",fga_per_chrom_outfile,"${biomaterial_id}.tsv")
  

cn_segments_path_template= paste0("${cna_data_dir}/${biomaterial_id}*_${sequencing_strategy}*${cna_seg_file_ext}")


#sv burden

sv_burden_patient_path_template = "${output_dir}sv_burden.${sv_analysis_type}.${patient_basename}.tsv"
sv_burden_binned_patient_path_template = "${output_dir}sv_burden_binned.${sv_analysis_type}.${patient_basename}.tsv"
sv_burden_chr_arm_patient_path_template = "${output_dir}sv_burden.chr_arm.${sv_analysis_type}.${patient_basename}.tsv"
sv_burden_cytoband_patient_path_template = "${output_dir}sv_burden.cytoband.${sv_analysis_type}.${patient_basename}.tsv"

sv_burden_gene_oriented_patient_path_template = "${output_dir}sv_burden.gene_oriented.${sv_analysis_type}.${patient_basename}.tsv"
sv_burden_gene_fusion_patient_path_template = "${output_dir}sv_burden.gene_fusion.${sv_analysis_type}.${patient_basename}.tsv"
multitool_gene_fusion_patient_path_template="${output_dir}gene_fusions.multitool.${sv_analysis_type}.${patient_basename}.tsv"


#snv
#patient basename ${tumor_id}_${normal_id} for somatic and ${normal_id} only for germline
snv_output_path_template = paste0("${utils_output_dir}snv.${analysis_type}.${patient_basename}.tsv")
snv_impact_output_path_template = paste0("${utils_output_dir}snv.${analysis_type}.vep_impact.${patient_basename}.tsv")


## cohort recurrence analyses
svs_recurrent_gene_centric_path_template=paste0("${merged_svs_dir}recurrent_gene_centric.${sv_analysis_type}.${annotation_level}.tsv")

cohort_snv_path_template = "${output_dir}cohort_snv.${analysis_type}.tsv"
cohort_snv_impact_path_template = "${output_dir}cohort_snv.${analysis_type}.vep_impact.tsv"

cohort_chr_arm_cna_path_template = "${output_dir}cohort_cna.chr_arm.tsv"
cohort_cytoband_cna_path_template = "${output_dir}cohort_cna.cytoband.tsv"
cohort_fga_per_chrom_path_template = "${output_dir}cohort_cna.fga_per_chrom.tsv"
recurrent_snv_path_template=paste0("${output_dir}recurrent_snv.${analysis_type}.${annotation_level}.tsv")

## annotated version with ".anno" but can use the same template and collect script
cohort_sv_path_template = "${output_dir}cohort_sv.${sv_analysis_type}.tsv"
#cohort_sv_anno_path_template = "${output_dir}cohort_sv.${sv_analysis_type}.anno.tsv"


##cnpare cn clustering
cnpare_cn_similarity_bins_path_template = paste0("${output_dir}cnpare_genome_bins.${cancer_type}.similarities.tsv")
cnpare_distance_plots_path_template=paste0("${output_dir}cnpare_genome_bins.${cancer_type}.distances.pdf")
cnpare_dendrogram_plots_path_template=paste0("${output_dir}cnpare_genome_bins.${cancer_type}.dendrogram.pdf")
cnpare_cluster_labels_path_template=paste0("${output_dir}cnpare_genome_bins.${cancer_type}.cluster_labels_order.${distance_metric}.tsv")
cnpare_cluster_result_path_template=paste0("${output_dir}cnpare_genome_bins.${cancer_type}.clusters.${distance_metric}.tsv")


## expression 
genes_vst_path_template = paste0("${output_dir}/genes.vst.${cohort_label}.${cancer_type}.${flag_blind}.tsv")
pca_explore_path_template= paste0("${output_dir}/pca.explore.${gene_set_label}.${cohort_label}.${cancer_type}.${flag_blind}.pdf")
nmf_plot_cluster_path_template= paste0("${output_dir}/${nmf_analysis_label}.${gene_set_label}.${cohort_label}.${cancer_type}.${flag_blind}.pdf")
nmf_results_path_template= paste0("${output_dir}/${nmf_analysis_label}.${gene_set_label}.${cohort_label}.${cancer_type}.${flag_blind}.rds")

#results are with cluster K
pca_pdf_path_template= paste0("${output_dir}/pca.${gene_set_label}.${cohort_label}.${cancer_type}.${cluster_k}.${flag_blind}.pdf")
umap_pdf_path_template= paste0("${output_dir}/umap.${gene_set_label}.${cohort_label}.${cancer_type}.${cluster_k}.${flag_blind}.pdf")
clustering_pdf_path_template= paste0("${output_dir}/hclust.${gene_set_label}.${cohort_label}.${cancer_type}.${cluster_k}.${flag_blind}.pdf")

results_name_template = paste0("${cancer_type}.${cohort_label}.${gene_set_label}.${cluster_k}.${flag_blind}")

# add rds tsv pdf
compare_cluster_paths_template = paste0("${output_dir}/compare_cluster.${results_name}.${ontology}")

metagenes_heatmap_pdf_path_template= paste0("${output_dir}/metagenes_heatmap.${results_name}.${group}.pdf")
summary_heatmap_pdf_path_template= paste0("${output_dir}/summary_heatmap.${results_name}.pdf")

metagenes_location_path_template = paste0("${output_dir}/metagenes_location.${results_name}.tsv")
metagenes_path_template = paste0("${output_dir}/metagenes.${results_name}.tsv")
patients_vs_metagenes_path_template = paste0("${output_dir}/patients_vs_metagenes.${results_name}.tsv")



## External resources

reference = "GRCh38_gencode_v31_CTAT_lib_Oct012019"
gtf_path_template = paste0("${resources_dir}ref_annot_",reference,".gtf.gz")
txdb_path_template = paste0("${resources_dir}ref_annot_",reference,".sqlite")

chimerseq_path_template = paste0("${resources_dir}ChimerSeq4.overview.tsv")
mitelman_path_template = paste0("${resources_dir}mitelman.mcgene.20201015.20210107.tsv")
cosmic_path_template = paste0("${resources_dir}cosmic_cancer_gene_census.v92.20200921.tsv")
kinases_path_template = paste0("${resources_dir}Kincat_Hsap.20210116.tsv")
grobner_recurrent_path_template = paste0("${resources_dir}grobner_stable20_genes_recurrent.tsv")
grobner_druggable_path_template = paste0("${resources_dir}grobner_stable22_genes_druggable.tsv")
pmc_snv_panel_path_template = paste0("${resources_dir}hg38_diagnostic_somatic_2.1.format.bed")
oncokb_path_template = paste0("${resources_dir}oncoKB_cancerGeneList_20210414.tsv")
chromosome_bands_path_template = paste0("${resources_dir}chromosome_bands.gz")

repeatmasker_path_template = paste0("${resources_dir}","repeatmasker.gz")
repeatmasker_df_cols = c("repeat_id","repLeft", "repClass","repFamily")

segmental_duplications_path_template = paste0("${resources_dir}","segmental_duplications.gz")
segmental_duplications_df_cols=c("segdup_id","sd_name","fracMatch")


## NCBI standardized databases
sv_database_path_template="${resources_dir}${sv_database_identifier}.GRCh38.variant_call.vcf.gz"
sv_database_df_cols = c("bp_name","to_coordinate","sv_db_svlen","sv_db_af","sv_db_ac")
##DGV
dgv_db_path_template = paste0("${resources_dir}dgv_GRCh38_hg38_variants_2020-02-25.tsv")
dgv_db_cols = c("bp_name","to_coordinate","sv_db_reference","sv_db_variantsubtype","samplesize","observedgains","observedlosses")

## inhouse  panels 
cna_pancancer_regions_path_template = paste0("${resources_dir}20201214_panCancerCNV.bed")
cna_hemato_regions_path_template = paste0("${resources_dir}20201214_hematoOncoCNV.bed")
cna_neuro_regions_path_template = paste0("${resources_dir}20201214_neuroOncoCNV.bed")
snv_somatic_panel_path_template=paste0("${resources_dir}hg38_diagnostic_somatic_2.1.format.bed")
snv_germline_panel_path_template=paste0("${resources_dir}hg38_diagnostic_germline_2.1.format.bed")

#replication timing   
replication_timing_path_template = "${resources_dir}ReplicationDomain.20220114.hg38_labels_NatGenetics2018.Human_NormalCellTypes_48datasets_hg38_50KB-qunatilescaled_label_0.15_threshold.txt"
gene_replication_timing_overlaps_path_template = "${resources_dir}overlaps.gene_replication_timing.tsv"
gene_replication_timing_path_template = "${resources_dir}gene_replication_timing.tsv"

 
 
 
#https://colorbrewer2.org/#type=qualitative&scheme=Set2&n=8
annotation_colors = list(
     cancer_type =  c(`ewing_sarcoma` =  "#8DA0CB",  `embryonal_rhabdomyosarcoma` = "#ff7f00",`nephroblastoma` = "#66C2A5", `osteosarcoma` ="#E78AC3",
     `hepatoblastoma` = "#e5c494", `neuroblastoma`="#a6d854", `alveolar_rhabdomyosarcoma` = "#fdbf6f"),
     alteration_simple = c(`snv` = "mediumpurple2", `sv` = "darkolivegreen3", `cna` ="tan2",
                                  `sv cna` = "darkolivegreen4", `snv cna`="tan4", `snv sv` = "mediumpurple4",
                                  `amp`= "red3", `sv amp`="maroon3", `snv sv cna`="mediumpurple4",
                                  `hom_loss` = "steelblue2", `sv hom_loss` = "steelblue4", `snv hom_loss`="mediumpurple5")
)



annotation_colors$complex_sv_superclasses = c(
`amplicon` = "#66c2a5",
`chromoplexy`="#fc8d62",
`chromothripsis`="#8da0cb",
`complex_other`="#e78ac3",
`simple`="#dddddd")

annotation_colors_call = c(`gain` = "red3", `loh` = "tan2", `loss` = "steelblue3")
annotation_colors_expression_change = c(`up` = "red3", `down` = "steelblue3")

 
